--Here i gather the code that I made in both Dax and PostgreSQL:


PostgreSql

CREATE TABLE online_sales_project (
    invoice_no VARCHAR,        
    invoice_date DATE,          
    invoice_hour TIME,          
    quantity INTEGER,          
    unit_price NUMERIC(10, 2),  
    CustomerID VARCHAR,        
    Country VARCHAR             
);

##Loocking for nulls
SELECT 
    SUM(CASE WHEN invoice_no IS NULL THEN 1 ELSE 0 END) AS invoice_no_nulls,
    SUM(CASE WHEN quantity IS NULL THEN 1 ELSE 0 END) AS quantity_nulls,
    SUM(CASE WHEN invoice_date IS NULL THEN 1 ELSE 0 END) AS invoice_date_nulls,
    SUM(CASE WHEN invoice_hour IS NULL THEN 1 ELSE 0 END) AS invoice_hour_nulls,
    SUM(CASE WHEN unit_price IS NULL THEN 1 ELSE 0 END) AS unit_price_nulls,
    SUM(CASE WHEN CustomerID IS NULL THEN 1 ELSE 0 END) AS CustomerID_nulls,
    SUM(CASE WHEN Country IS NULL THEN 1 ELSE 0 END) AS country_nulls
FROM online_sales_project;

##Fill nulls
UPDATE online_sales_project
SET Customerid = 'UNKNOWN'   
WHERE Customerid IS NULL;

##HOW MANY "UNKNOWNS" =135080
SELECT 
    SUM(CASE WHEN CustomerID = 'UNKNOWN' THEN 1 ELSE 0 END) AS CustomerID_UNKNOWN
    
##DUPLICATES, 304734 DUPLICATES WHERE DELETED
SELECT 
    invoice_no,
    invoice_date,
    invoice_hour,
    quantity,
    unit_price,
    CustomerID,
    Country,
    COUNT(*) AS duplicate_count
FROM online_sales_project
GROUP BY 
    invoice_no,
    invoice_date,
    invoice_hour,
    quantity,
    unit_price,
    CustomerID,
    Country
HAVING COUNT(*) > 1;
WITH cte_duplicates AS (
    SELECT 
        ctid,  -- Internal unique identifier of each row in PostgreSQL
        ROW_NUMBER() OVER (
            PARTITION BY invoice_no, invoice_date, invoice_hour, quantity, unit_price, CustomerID, Country
            ORDER BY invoice_no
        ) AS row_num
    FROM online_sales_project
)
DELETE FROM online_sales_project
WHERE ctid IN (
    SELECT ctid
    FROM cte_duplicates
    WHERE row_num > 1
);



##Now i added a column that calculated the total purchase value p*q
ALTER TABLE online_sales_project            
ADD COLUMN total_price NUMERIC;

UPDATE online_sales_project
SET total_price = quantity * unit_price;


-- Create a column with the sum of the amount that each buyer spent and place them in a ranking
ALTER TABLE online_sales_project ADD COLUMN IF NOT EXISTS spending_rank INTEGER;

WITH customer_spending AS (
    SELECT CustomerID, SUM(total_price) AS total_spent
    FROM online_sales_project
    GROUP BY CustomerID
),
ranked_spending AS (
    SELECT CustomerID, total_spent, RANK() OVER (ORDER BY total_spent DESC) AS spending_rank
    FROM customer_spending
)

UPDATE online_sales_project
SET spending_rank = ranked_spending.spending_rank
FROM ranked_spending
WHERE online_sales_project.CustomerID = ranked_spending.CustomerID;

-----------------------------------------------------------------------------------------------------
DAX

I do this to make a categorical variable that specified the type of customer in relation with the rfm analysis

CustomerSegment =
SWITCH(
    TRUE(),
    [RecencyScore] >= 4 && [FrequencyScore] >= 4 && [MonetaryScore] >= 4, "Champions",
    [FrequencyScore] >= 4 && [MonetaryScore] >= 4 && [RecencyScore] <= 3, "Loyal Customers",
    [MonetaryScore] >= 4 && [FrequencyScore] <= 3 && [RecencyScore] <= 3, "Big Spenders",
    [RecencyScore] >= 4 && [FrequencyScore] <= 3 && [MonetaryScore] <= 3, "Recent Customers",
    [RecencyScore] >= 4 && [FrequencyScore] >= 3 && [MonetaryScore] >= 3, "Promising",
    [RecencyScore] <= 2 && [FrequencyScore] >= 4 && [MonetaryScore] >= 4, "At Risk",
    [RecencyScore] >= 3 && [FrequencyScore] >= 3 && [MonetaryScore] >= 3, "Potential Loyalists",
    [RecencyScore] <= 2 && [FrequencyScore] >= 2 && [MonetaryScore] >= 2, "About to Sleep",
    [RecencyScore] <= 2 && [FrequencyScore] <= 2 && [MonetaryScore] <= 2, "Lost Customers",
    [RecencyScore] <= 3 && [FrequencyScore] <= 3 && [MonetaryScore] <= 3, "Low-Value Customers",
    "Other"
)
And this to make a categorical variable that specified the hour where a purchase was made.

HourSegment =
SWITCH(
    TRUE(),
    HOUR([invoice_hour]) = 6, "6 AM - 7 AM",
    HOUR([invoice_hour]) = 7, "7 AM - 8 AM",
    HOUR([invoice_hour]) = 8, "8 AM - 9 AM",
    HOUR([invoice_hour]) = 9, "9 AM - 10 AM",
    HOUR([invoice_hour]) = 10, "10 AM - 11 AM",
    HOUR([invoice_hour]) = 11, "11 AM - 12 PM",
    HOUR([invoice_hour]) = 12, "12 PM - 1 PM",
    HOUR([invoice_hour]) = 13, "1 PM - 2 PM",
    HOUR([invoice_hour]) = 14, "2 PM - 3 PM",
    HOUR([invoice_hour]) = 15, "3 PM - 4 PM",
    HOUR([invoice_hour]) = 16, "4 PM - 5 PM",
    HOUR([invoice_hour]) = 17, "5 PM - 6 PM",
    HOUR([invoice_hour]) = 18, "6 PM - 7 PM",
    HOUR([invoice_hour]) = 19, "7 PM - 8 PM",
    HOUR([invoice_hour]) = 20, "8 PM - 9 PM",
    "Other"
)

